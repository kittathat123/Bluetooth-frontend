{"ast":null,"code":"/**\n * Particles component for A-Frame.\n *\n * ShaderParticleEngine by Squarefeet (https://github.com/squarefeet).\n */\nvar SPE = require('./lib/SPE.js');\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\nAFRAME.registerComponent('particle-system', {\n  schema: {\n    preset: {\n      type: 'string',\n      default: '',\n      oneOf: ['default', 'dust', 'snow', 'rain']\n    },\n    maxAge: {\n      type: 'number',\n      default: 6\n    },\n    positionSpread: {\n      type: 'vec3',\n      default: {\n        x: 0,\n        y: 0,\n        z: 0\n      }\n    },\n    type: {\n      type: 'number',\n      default: SPE.distributions.BOX\n    },\n    rotationAxis: {\n      type: 'string',\n      default: 'x'\n    },\n    rotationAngle: {\n      type: 'number',\n      default: 0\n    },\n    rotationAngleSpread: {\n      type: 'number',\n      default: 0\n    },\n    accelerationValue: {\n      type: 'vec3',\n      default: {\n        x: 0,\n        y: -10,\n        z: 0\n      }\n    },\n    accelerationSpread: {\n      type: 'vec3',\n      default: {\n        x: 10,\n        y: 0,\n        z: 10\n      }\n    },\n    velocityValue: {\n      type: 'vec3',\n      default: {\n        x: 0,\n        y: 25,\n        z: 0\n      }\n    },\n    velocitySpread: {\n      type: 'vec3',\n      default: {\n        x: 10,\n        y: 7.5,\n        z: 10\n      }\n    },\n    dragValue: {\n      type: 'number',\n      default: 0\n    },\n    dragSpread: {\n      type: 'number',\n      default: 0\n    },\n    dragRandomise: {\n      type: 'boolean',\n      default: false\n    },\n    color: {\n      type: 'array',\n      default: ['#0000FF', '#FF0000']\n    },\n    size: {\n      type: 'number',\n      default: 1\n    },\n    direction: {\n      type: 'number',\n      default: 1\n    },\n    duration: {\n      type: 'number',\n      default: null\n    },\n    particleCount: {\n      type: 'number',\n      default: 1000\n    },\n    texture: {\n      type: 'asset',\n      default: 'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/star2.png'\n    },\n    randomise: {\n      type: 'boolean',\n      default: false\n    },\n    opacity: {\n      type: 'array',\n      default: ['1']\n    },\n    maxParticleCount: {\n      type: 'number',\n      default: 250000\n    },\n    blending: {\n      type: 'number',\n      default: THREE.AdditiveBlending,\n      oneOf: [THREE.NoBlending, THREE.NormalBlending, THREE.AdditiveBlending, THREE.SubtractiveBlending, THREE.MultiplyBlending]\n    },\n    enabled: {\n      type: 'boolean',\n      default: true\n    }\n  },\n  init: function () {\n    this.presets = {};\n    /* preset settings can be overwritten */\n\n    this.presets['dust'] = {\n      maxAge: 20,\n      positionSpread: {\n        x: 100,\n        y: 100,\n        z: 100\n      },\n      rotationAngle: 3.14,\n      accelerationValue: {\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      accelerationSpread: {\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      velocityValue: {\n        x: 1,\n        y: 0.3,\n        z: 1\n      },\n      velocitySpread: {\n        x: 0.5,\n        y: 1,\n        z: 0.5\n      },\n      color: ['#FFFFFF'],\n      particleCount: 100,\n      texture: 'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/smokeparticle.png'\n    };\n    this.presets['snow'] = {\n      maxAge: 20,\n      positionSpread: {\n        x: 100,\n        y: 100,\n        z: 100\n      },\n      rotationAngle: 3.14,\n      accelerationValue: {\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      accelerationSpread: {\n        x: 0.2,\n        y: 0,\n        z: 0.2\n      },\n      velocityValue: {\n        x: 0,\n        y: 8,\n        z: 0\n      },\n      velocitySpread: {\n        x: 2,\n        y: 0,\n        z: 2\n      },\n      color: ['#FFFFFF'],\n      particleCount: 200,\n      texture: 'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/smokeparticle.png'\n    };\n    this.presets['rain'] = {\n      maxAge: 1,\n      positionSpread: {\n        x: 100,\n        y: 100,\n        z: 100\n      },\n      rotationAngle: 3.14,\n      accelerationValue: {\n        x: 0,\n        y: 3,\n        z: 0\n      },\n      accelerationSpread: {\n        x: 2,\n        y: 1,\n        z: 2\n      },\n      velocityValue: {\n        x: 0,\n        y: 75,\n        z: 0\n      },\n      velocitySpread: {\n        x: 10,\n        y: 50,\n        z: 10\n      },\n      color: ['#FFFFFF'],\n      size: 0.4,\n      texture: 'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/raindrop.png'\n    };\n  },\n  update: function (oldData) {\n    // Remove old particle group.\n    if (this.particleGroup) {\n      this.el.removeObject3D('particle-system');\n    } // Set the selected preset, if any, or use an empty object to keep schema defaults\n\n\n    this.preset = this.presets[this.data.preset] || {}; // Get custom, preset, or default data for each property defined in the schema\n\n    for (var key in this.data) {\n      this.data[key] = this.applyPreset(key);\n    }\n\n    this.initParticleSystem(this.data);\n\n    if (this.data.enabled === true) {\n      this.startParticles();\n    } else {\n      this.stopParticles();\n    }\n  },\n  applyPreset: function (key) {\n    // !this.attrValue[key] = the user did not set a custom value\n    // this.preset[key] = there exists a value for this key in the selected preset\n    if (!this.attrValue[key] && this.preset[key]) {\n      return this.preset[key];\n    } else {\n      // Otherwise stick to the user or schema default value\n      return this.data[key];\n    }\n  },\n  tick: function (time, dt) {\n    this.particleGroup.tick(dt / 1000);\n  },\n  remove: function () {\n    // Remove particle system.\n    if (!this.particleGroup) {\n      return;\n    }\n\n    this.el.removeObject3D('particle-system');\n  },\n  startParticles: function () {\n    this.particleGroup.emitters.forEach(function (em) {\n      em.enable();\n    });\n  },\n  stopParticles: function () {\n    this.particleGroup.emitters.forEach(function (em) {\n      em.disable();\n    });\n  },\n  initParticleSystem: function (settings) {\n    var loader = new THREE.TextureLoader();\n    var particle_texture = loader.load(settings.texture, function (texture) {\n      return texture;\n    }, function (xhr) {\n      console.log(xhr.loaded / xhr.total * 100 + '% loaded');\n    }, function (xhr) {\n      console.log('An error occurred');\n    });\n    this.particleGroup = new SPE.Group({\n      texture: {\n        value: particle_texture\n      },\n      maxParticleCount: settings.maxParticleCount,\n      blending: settings.blending\n    });\n    var emitter = new SPE.Emitter({\n      maxAge: {\n        value: settings.maxAge\n      },\n      type: {\n        value: settings.type\n      },\n      position: {\n        spread: new THREE.Vector3(settings.positionSpread.x, settings.positionSpread.y, settings.positionSpread.z),\n        randomise: settings.randomise //spreadClamp: new THREE.Vector3( 2, 2, 2 ),\n        //radius: 4\n\n      },\n      rotation: {\n        axis: settings.rotationAxis == 'x' ? new THREE.Vector3(1, 0, 0) : settings.rotationAxis == 'y' ? new THREE.Vector3(0, 1, 0) : settings.rotationAxis == 'z' ? new THREE.Vector3(0, 0, 1) : new THREE.Vector3(0, 1, 0),\n        angle: settings.rotationAngle,\n        angleSpread: settings.rotationAngleSpread,\n        static: true\n      },\n      acceleration: {\n        value: new THREE.Vector3(settings.accelerationValue.x, settings.accelerationValue.y, settings.accelerationValue.z),\n        spread: new THREE.Vector3(settings.accelerationSpread.x, settings.accelerationSpread.y, settings.accelerationSpread.z)\n      },\n      velocity: {\n        value: new THREE.Vector3(settings.velocityValue.x, settings.velocityValue.y, settings.velocityValue.z),\n        spread: new THREE.Vector3(settings.velocitySpread.x, settings.velocitySpread.y, settings.velocitySpread.z)\n      },\n      drag: {\n        value: new THREE.Vector3(settings.dragValue.x, settings.dragValue.y, settings.dragValue.z),\n        spread: new THREE.Vector3(settings.dragSpread.x, settings.dragSpread.y, settings.dragSpread.z),\n        randomise: settings.dragRandomise\n      },\n      color: {\n        value: settings.color.map(function (c) {\n          return new THREE.Color(c);\n        })\n      },\n      size: {\n        value: settings.size\n      },\n\n      /*wiggle: { value: 4, spread: 2 }, //settings.wiggle,*/\n\n      /*drag: {\n          value: settings.drag\n      },*/\n      direction: {\n        value: settings.direction\n      },\n      duration: settings.duration,\n      opacity: {\n        value: settings.opacity.map(function (o) {\n          return parseFloat(o);\n        })\n      },\n      particleCount: settings.particleCount\n    });\n    this.particleGroup.addEmitter(emitter);\n    this.particleGroup.mesh.frustumCulled = false;\n    this.el.setObject3D('particle-system', this.particleGroup.mesh);\n  }\n});","map":{"version":3,"sources":["/Users/kittathat/Documents/window/SE/Year 4/Year 4 Project/Bluetooth-frontend/node_modules/aframe-particle-system-component/index.js"],"names":["SPE","require","AFRAME","Error","registerComponent","schema","preset","type","default","oneOf","maxAge","positionSpread","x","y","z","distributions","BOX","rotationAxis","rotationAngle","rotationAngleSpread","accelerationValue","accelerationSpread","velocityValue","velocitySpread","dragValue","dragSpread","dragRandomise","color","size","direction","duration","particleCount","texture","randomise","opacity","maxParticleCount","blending","THREE","AdditiveBlending","NoBlending","NormalBlending","SubtractiveBlending","MultiplyBlending","enabled","init","presets","update","oldData","particleGroup","el","removeObject3D","data","key","applyPreset","initParticleSystem","startParticles","stopParticles","attrValue","tick","time","dt","remove","emitters","forEach","em","enable","disable","settings","loader","TextureLoader","particle_texture","load","xhr","console","log","loaded","total","Group","value","emitter","Emitter","position","spread","Vector3","rotation","axis","angle","angleSpread","static","acceleration","velocity","drag","map","c","Color","o","parseFloat","addEmitter","mesh","frustumCulled","setObject3D"],"mappings":"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","sourcesContent":["/**\n * Particles component for A-Frame.\n *\n * ShaderParticleEngine by Squarefeet (https://github.com/squarefeet).\n */\n\nvar SPE = require('./lib/SPE.js');\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\nAFRAME.registerComponent('particle-system', {\n\n    schema: {\n        preset: {\n            type: 'string',\n            default: '',\n            oneOf: ['default', 'dust', 'snow', 'rain']\n        },\n        maxAge: {\n            type: 'number',\n            default: 6\n        },\n        positionSpread: {\n            type: 'vec3',\n            default: { x: 0, y: 0, z: 0 }\n        },\n        type: {\n            type: 'number',\n            default: SPE.distributions.BOX\n        },\n        rotationAxis: {\n            type: 'string',\n            default: 'x'\n        },\n        rotationAngle: {\n            type: 'number',\n            default: 0\n        },\n        rotationAngleSpread: {\n            type: 'number',\n            default: 0\n        },\n        accelerationValue: {\n            type: 'vec3',\n            default: { x: 0, y: -10, z: 0 }\n        },\n        accelerationSpread: {\n            type: 'vec3',\n            default: { x: 10, y: 0, z: 10 }\n        },\n        velocityValue: {\n            type: 'vec3',\n            default: { x: 0, y: 25, z: 0 }\n        },\n        velocitySpread: {\n            type: 'vec3',\n            default: { x: 10, y: 7.5, z: 10 }\n        },\n        dragValue: {\n            type: 'number',\n            default: 0\n        },\n        dragSpread: {\n            type: 'number',\n            default: 0\n        },\n        dragRandomise: {\n            type: 'boolean',\n            default: false\n        },\n        color: {\n            type: 'array',\n            default: [ '#0000FF', '#FF0000' ]\n        },\n        size: {\n            type: 'number',\n            default: 1\n        },\n        direction: {\n            type: 'number',\n            default: 1\n        },\n        duration: {\n            type: 'number',\n            default: null\n        },\n        particleCount: {\n            type: 'number',\n            default: 1000\n        },\n        texture: {\n            type: 'asset',\n            default: 'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/star2.png'\n        },\n        randomise: {\n            type: 'boolean',\n            default: false\n        },\n        opacity: {\n          type: 'array',\n          default: [ '1' ]\n        },\n        maxParticleCount: {\n            type: 'number',\n            default: 250000\n        },\n        blending: {\n            type: 'number',\n            default: THREE.AdditiveBlending,\n            oneOf: [THREE.NoBlending,THREE.NormalBlending,THREE.AdditiveBlending,THREE.SubtractiveBlending,THREE.MultiplyBlending]\n        },\n        enabled: {\n            type:'boolean',\n            default:true\n        }\n    },\n\n\n    init: function() {\n\n        this.presets = {};\n\n        /* preset settings can be overwritten */\n\n        this.presets['dust'] = {\n            maxAge: 20,\n            positionSpread: {x:100,y:100,z:100},\n            rotationAngle: 3.14,\n            accelerationValue: {x: 0, y: 0, z: 0},\n            accelerationSpread: {x: 0, y: 0, z: 0},\n            velocityValue: {x: 1, y: 0.3, z: 1},\n            velocitySpread: {x: 0.5, y: 1, z: 0.5},\n            color: ['#FFFFFF'],\n            particleCount: 100,\n            texture: 'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/smokeparticle.png'\n        };\n\n\n        this.presets['snow'] = {\n            maxAge: 20,\n            positionSpread: {x:100,y:100,z:100},\n            rotationAngle: 3.14,\n            accelerationValue: {x: 0, y: 0, z: 0},\n            accelerationSpread: {x: 0.2, y: 0, z: 0.2},\n            velocityValue: {x: 0, y: 8, z: 0},\n            velocitySpread: {x: 2, y: 0, z: 2},\n            color: ['#FFFFFF'],\n            particleCount: 200,\n            texture: 'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/smokeparticle.png'\n        };\n\n\n        this.presets['rain'] = {\n            maxAge: 1,\n            positionSpread: {x:100,y:100,z:100},\n            rotationAngle: 3.14,\n            accelerationValue: {x: 0, y: 3, z: 0},\n            accelerationSpread: {x: 2, y: 1, z: 2},\n            velocityValue: {x: 0, y: 75, z: 0},\n            velocitySpread: {x: 10, y: 50, z: 10},\n            color: ['#FFFFFF'],\n            size: 0.4,\n            texture: 'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/raindrop.png'\n        };\n\n\n    },\n\n\n    update: function (oldData) {\n\n        // Remove old particle group.\n        if (this.particleGroup) {\n            this.el.removeObject3D('particle-system');\n        }\n\n        // Set the selected preset, if any, or use an empty object to keep schema defaults\n        this.preset = this.presets[this.data.preset] || {};\n\n        // Get custom, preset, or default data for each property defined in the schema\n        for (var key in this.data) {\n            this.data[key] = this.applyPreset(key);\n        }\n\n        this.initParticleSystem(this.data);\n\n        if(this.data.enabled === true) {\n            this.startParticles()\n        } else {\n            this.stopParticles()\n        }\n    },\n\n\n    applyPreset: function (key) {\n        // !this.attrValue[key] = the user did not set a custom value\n        // this.preset[key] = there exists a value for this key in the selected preset\n        if (!this.attrValue[key] && this.preset[key]) {\n            return this.preset[key];\n        } else {\n            // Otherwise stick to the user or schema default value\n            return this.data[key];\n        }\n    },\n\n\n    tick: function(time, dt) {\n\n        this.particleGroup.tick(dt / 1000);\n    },\n\n\n    remove: function() {\n\n        // Remove particle system.\n        if (!this.particleGroup) { return; }\n        this.el.removeObject3D('particle-system');\n    },\n\n    startParticles: function() {\n        this.particleGroup.emitters.forEach(function(em) { em.enable() });\n    },\n\n    stopParticles: function() {\n        this.particleGroup.emitters.forEach(function(em) { em.disable() });\n    },\n\n\n    initParticleSystem: function(settings) {\n\n        var loader = new THREE.TextureLoader();\n        var particle_texture = loader.load(\n            settings.texture,\n            function (texture) {\n                return texture;\n            },\n            function (xhr) {\n              console.log((xhr.loaded / xhr.total * 100) + '% loaded');\n            },\n            function (xhr) {\n              console.log('An error occurred');\n            }\n        );\n\n        this.particleGroup = new SPE.Group({\n            texture: {\n                value: particle_texture\n            },\n            maxParticleCount: settings.maxParticleCount,\n            blending: settings.blending\n        });\n\n        var emitter = new SPE.Emitter({\n            maxAge: {\n                value: settings.maxAge\n            },\n            type: {\n                value: settings.type\n            },\n            position: {\n                spread: new THREE.Vector3(settings.positionSpread.x, settings.positionSpread.y, settings.positionSpread.z),\n                randomise: settings.randomise\n                //spreadClamp: new THREE.Vector3( 2, 2, 2 ),\n                //radius: 4\n            },\n            rotation: {\n                axis: (settings.rotationAxis=='x'?new THREE.Vector3(1, 0, 0):(settings.rotationAxis=='y'?new THREE.Vector3(0, 1, 0):(settings.rotationAxis=='z'?new THREE.Vector3(0, 0, 1):new THREE.Vector3(0, 1, 0)))),\n                angle: settings.rotationAngle,\n                angleSpread: settings.rotationAngleSpread,\n                static: true\n            },\n            acceleration: {\n                value: new THREE.Vector3(settings.accelerationValue.x, settings.accelerationValue.y, settings.accelerationValue.z),\n                spread: new THREE.Vector3(settings.accelerationSpread.x, settings.accelerationSpread.y, settings.accelerationSpread.z)\n            },\n            velocity: {\n                value: new THREE.Vector3(settings.velocityValue.x, settings.velocityValue.y, settings.velocityValue.z),\n                spread: new THREE.Vector3(settings.velocitySpread.x, settings.velocitySpread.y, settings.velocitySpread.z)\n            },\n            drag: {\n                value: new THREE.Vector3(settings.dragValue.x, settings.dragValue.y, settings.dragValue.z),\n                spread: new THREE.Vector3(settings.dragSpread.x, settings.dragSpread.y, settings.dragSpread.z),\n                randomise: settings.dragRandomise\n            },\n            color: {\n                value: settings.color.map(function(c) { return new THREE.Color(c); })\n            },\n            size: {\n                value: settings.size\n            },\n            /*wiggle: { value: 4, spread: 2 }, //settings.wiggle,*/\n            /*drag: {\n                value: settings.drag\n            },*/\n            direction: {\n                value: settings.direction\n            },\n            duration: settings.duration,\n            opacity: { value: settings.opacity.map(function (o) { return parseFloat(o); }) },\n            particleCount: settings.particleCount\n        });\n\n        this.particleGroup.addEmitter(emitter);\n        this.particleGroup.mesh.frustumCulled = false;\n        this.el.setObject3D('particle-system', this.particleGroup.mesh);\n    }\n});\n"]},"metadata":{},"sourceType":"script"}